[
  {
    "question": "What are the main responsibilities and areas of ownership for the Data Engineering team?",
    "answer": "The Data Engineering team is primarily responsible for data warehouse and management. Their areas of ownership include:\n\n1. Data warehouse & management\n2. Data Pipelines\n3. ETL scripts and data transformations\n4. Data connections to Looker and dbt\n5. Management of tools such as Rudderstack, Snowflake, Airflow, and Stitch\n\nThis team plays a crucial role in ensuring that data is properly stored, transformed, and made accessible for analysis and reporting purposes. They work with various tools and technologies to create efficient data pipelines and maintain the integrity of the data warehouse.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/data_engineering"
  },
  {
    "question": "What is the process for engaging with Mattermost Legal regarding customer contracts and other sales-related documents?",
    "answer": "For customer contracts, requests to modify standard terms or ordering documents, customer questionnaires, forms, reseller agreements, or any other documents pertaining to revenue-generating issues, the process is to create a Case in the applicable Account in Salesforce. Detailed instructions for this process can be found under the 'Deal Desk' section of the Mattermost Operational Sales Handbook. This approach ensures that all sales-related legal matters are properly tracked and addressed within the company's established systems.",
    "source": "https://handbook.mattermost.com/operations/legal"
  },
  {
    "question": "What are the different ways to contact or provide feedback about the Mattermost Handbook?",
    "answer": "There are three main ways to contact or provide feedback about the Mattermost Handbook:\n\n1. Join the Handbook Champions channel: Users can reach out through the dedicated Handbook Champions channel on the Mattermost community platform.\n\n2. Update the handbook directly: Anyone can edit the content and open a pull request to suggest changes or updates to the handbook.\n\n3. Share ideas and feedback via GitHub: Users can submit their ideas, suggestions, or feedback by creating issues in the Mattermost Handbook GitHub repository.\n\nThese options allow for various levels of engagement, from direct communication to collaborative editing and formal feedback submission, ensuring that users have multiple avenues to contribute to and improve the handbook.",
    "source": "https://handbook.mattermost.com/help-and-support/contact-us"
  },
  {
    "question": "What is the purpose of the Mattermost Handbook and how is it maintained?",
    "answer": "The Mattermost Handbook serves as a continual work-in-progress documentation for Mattermost staff, contributor community, and end user community. Its primary purpose is to iteratively increase clarity for those involved in building the future of the company and its offerings, while providing a single source of truth. The handbook is maintained in a dedicated GitHub repository (https://github.com/mattermost/mattermost-handbook) and is edited using GitBook as a frontend. It follows a unique approach of labeling content as 1%, 50%, or 99% drafts to encourage feedback, iteration, and inclusivity in the development process. The handbook is open for contributions, with detailed instructions available for updating it. All documentation is released under a Creative Commons License, promoting openness and collaboration.",
    "source": "https://handbook.mattermost.com/"
  },
  {
    "question": "What is the MLX in Mattermost and what is the purpose of the MLX Growth Meeting?",
    "answer": "MLX stands for 'Mattermost Leadership eXtended' and consists of select direct reports from the Mattermost Leadership Team (MLT). The MLX Growth Meeting is a specific gathering within this structure. Its purpose is to increase clarity, alignment, and results around MLX Growth efforts. This meeting takes place on Tuesdays at 11:00 California Time and includes attendees such as IJT, BG, DH, JB, JD, KF, and MN, with optional attendees CJH, MH, and DMR. The meeting utilizes an MLX Growth Board in Asana for organization and tracking of initiatives.",
    "source": "https://handbook.mattermost.com/operations/mlx-meetings"
  },
  {
    "question": "What are the main areas of ownership for the Governance, Risk, and Compliance (GRC) team?",
    "answer": "The Governance, Risk, and Compliance (GRC) team is responsible for several key areas within the company. These include:\n\n1. Third-Party Risk Management: Assessing and managing risks associated with external partners and vendors.\n\n2. Security Policies: Developing, implementing, and maintaining security policies across the organization.\n\n3. Security Risk Register: Maintaining a comprehensive register of security risks and their mitigation strategies.\n\n4. Customer Security Questionnaires / RFPs: Handling security-related inquiries from customers and responding to Requests for Proposals (RFPs).\n\n5. Security Compliance: Ensuring the company adheres to security standards and regulations, with a specific focus on SOC 2 compliance.\n\nThese areas of ownership collectively contribute to the implementation and monitoring of the company's overall governance, risk, and compliance program, ensuring that the organization maintains a robust security posture and meets regulatory requirements.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/grc"
  },
  {
    "question": "What are the main responsibilities of the Product Security team at Mattermost?",
    "answer": "The Product Security team at Mattermost is responsible for a wide range of activities aimed at protecting and enhancing the security of Mattermost products. Their key areas of ownership include:\n\n1. Managing the Responsible Disclosure Program\n2. Conducting Security Reviews for plugins, features, architecture, and release pipelines\n3. Overseeing the Bug Bounty Program\n4. Performing Threat Modeling\n5. Implementing Security Automation, including tools like Dependency Track, Security Scorecard, and Gobom\n6. Conducting Penetration Testing on the product\n7. Preparing Security Release Notes\n\nThese responsibilities collectively ensure that Mattermost products maintain a high level of security, addressing potential vulnerabilities, and keeping stakeholders informed about security-related updates and improvements.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/product_security"
  },
  {
    "question": "What are the main responsibilities of the Security Operations team at Mattermost?",
    "answer": "The Security Operations team at Mattermost is responsible for several key areas:    1. Security Incident Response Program: This includes active monitoring and analysis of security events across company, product, and service platforms. They implement and maintain security monitoring and analysis platforms, ensure the availability of log ingestion and processing infrastructure, and create and enforce operational security policies and procedures.    2. Infrastructure Vulnerability Management Program: The team maintains visibility of industry trends and emerging security issues, contributes to customer security questionnaires, acts on results of Red Team / Penetration Testing, monitors and maintains Endpoint Detection & Response (EDR) systems, manages access control for Engineering tools and services, and engages in verification and impact assessment of product vulnerabilities.    3. Email Security: They analyze, verify, and react to phishing and other malicious email threats.    4. Infrastructure Management: The team is responsible for the management and upkeep of several critical infrastructure components, including:       - Vault infrastructure and policies       - Teleport (cloud/company) platform       - Pritunl VPN platform    Overall, their role is crucial in maintaining the security posture of Mattermost's organization, products, and services, as well as ensuring compliance with various security frameworks.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/security_operations"
  },
  {
    "question": "What are the main responsibilities and principles of the Cloud Platform team at Mattermost?",
    "answer": "The Cloud Platform team at Mattermost is responsible for the company's Cloud SaaS technology. Their vision is to enable everyone to build and deploy with high velocity in a self-served manner. The team's main responsibilities include increasing developer productivity, influencing cloud readiness, making input-driven decisions, encouraging best practices, maintaining high-quality standards, experimenting, and keeping documentation up-to-date. Their key principles include balancing stability and experimentation, embracing teamwork, continuous improvement, data-driven decision making, distributed systems and team approach, curiosity and continuous learning, and knowledge sharing. The team's areas of ownership, in order of priority, are: 1) Ensuring automated provisioning, rolling out, and controlling of workspace fleets, 2) Improving developer productivity through self-served capabilities for testing environments, and 3) Supporting other teams for cloud readiness. They also follow a general workflow for issue management and participate in regular meetings such as Platform Planning and Infrastructure Guild for cross-organizational collaboration.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/cloud_platform"
  },
  {
    "question": "What teams and tools are involved in Mattermost's Research and Development (R&D) process?",
    "answer": "Mattermost's Research and Development (R&D) process involves a diverse range of teams and tools. The R&D department includes engineering, QA, product management, documentation, analytics, community, and design (UX, UI) teams. They use various tools for different purposes:\n\n1. Analyst Research: For tracking analyst meetings, briefing procedures, and research. Mattermost is currently a Gartner client.\n2. Productboard: Used for product roadmaps, feature releases, and planned features.\n3. Atlassian: For product specs, with dedicated spaces for teams and software projects.\n4. Figma: For designs and mockups.\n5. Mattermost's own platform: Various channels are used for team communication, such as 'DWG: Documentation Working Group' for technical writers, 'Product Management' for product managers, and 'UX Design' for the UX team.\n6. GitHub: For open-source software development and contributor involvement.\n7. Helpdesk: For requesting access to various tools.\n\nThe R&D department also maintains several web properties for documentation and information sharing, including the developer portal (developers.mattermost.com) for integration and contribution guidelines. The department is led by Corey Hulen (CTO) and Chen Lim (VP, Product), with the full organizational structure tracked in a dedicated spreadsheet.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/"
  },
  {
    "question": "What are the main responsibilities and areas of ownership for the Tech Writing team at Mattermost?",
    "answer": "The Tech Writing team at Mattermost is primarily responsible for maintaining the Mattermost Documentation site and ensuring the quality of various knowledge and language repositories used within Mattermost products. Their areas of ownership include:\n\n1. docs.mattermost.com - The main documentation site for Mattermost\n2. Information architecture and quality of developers.mattermost.com\n3. In-product UI text - Ensuring consistency and clarity in the user interface\n4. Mattermost Product Translations - Overseeing the translation process for Mattermost products\n5. Information architecture and quality of handbook.mattermost.com\n\nThe team's role is crucial in maintaining clear, accurate, and accessible information across various platforms, from user-facing documentation to internal handbooks and developer resources.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/tech_writing"
  },
  {
    "question": "How is the R&D organization at Mattermost structured, and what are the main divisions within it?",
    "answer": "The R&D organization at Mattermost is structured into multiple divisions, each with specific areas of responsibility. The main divisions are:    1. Product: This division develops and ships the majority of product-related features. It consists of full-stack teams including developers, UX designers, QA analysts, technical writers, and product managers. They work on core product features, frameworks, platform, and performance.    2. Data Engineering: This division builds and supports data infrastructure and analysis tools.    3. Infrastructure: This group is responsible for providing a SaaS Platform as Product. It includes three sub-teams:       - Delivery       - Cloud Platform       - Site Reliability Engineering (SRE)    4. Security: This division is responsible for implementing and monitoring the company's security program. It consists of three sub-teams:       - Governance, Risk, and Compliance (GRC)       - Product Security       - Security Operations    The organization structure and team membership are maintained in a spreadsheet that serves as the source of truth. Additionally, the R&D Calendar is used to highlight recurring events such as team planning meetings, guild meetings, hangouts, and office hours, promoting transparency and facilitating cross-team collaboration.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/"
  },
  {
    "question": "What resources are available for QA testing in Mattermost, particularly for telemetry testing?",
    "answer": "Mattermost provides several resources for QA testing, with a particular focus on telemetry testing. The Mattermost Telemetry Handbook is a key resource for bug fixes related to server, web-app, mobile, and plugin telemetry. This handbook offers step-by-step instructions for adding and updating telemetry, as well as QA-ing test data. It includes information on telemetry scoping requirements for PM/Dev/QA, standardized Rudderstack development implementation processes, and dashboards to monitor test data. Additionally, the content mentions other QA resources such as links to Desktop and Mobile App Releases, E2E Test Reference, Release Management Docs, and information about Test Servers. For email testing, the content suggests using Gmail's email alias feature for creating multiple test email addresses.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/quality/testing-tips-and-tools"
  },
  {
    "question": "What is the mission of the Delivery team at Mattermost and how do they contribute to the engineering process?",
    "answer": "The Delivery team at Mattermost has a mission to enable the Engineering department to deliver products that are high quality, secure, scalable, and efficient to Mattermost customers. They play a crucial role in ensuring that scheduled, security, and patch releases are publicly released in a timely manner. The team contributes to the engineering process by creating workflows, frameworks, tools, architecture, and automation that allow Engineering teams to effectively and efficiently bring their work to production. Some of their key actions include developing CI/CD blueprints and tooling for development and testing workflows, creating automation test frameworks, automating release generation to reduce Release Manager toil work, improving security principles in the Mattermost software supply chain, and extending release environments to enhance testing for Mattermost releases. The Delivery team operates on principles such as guarding and raising end-product quality standards, treating their work like a product, promoting self-serve solutions, aiming to make their work easy to use, and influencing best practices across the organization.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/delivery"
  },
  {
    "question": "What is the vision of Quality Assurance at Mattermost and how is the QA team structured?",
    "answer": "The vision for Quality Assurance at Mattermost is to earn and protect trust in the reliability and usability of the platform, while championing high quality standards as the company and its customers grow. The QA team is structured as a Guild, which includes both core QA team members and QA professionals embedded in feature or platform teams. This structure allows for a collaborative approach to quality assurance across the organization. The QA Guild engages in various channels within the Mattermost community, such as 'QA: Quality Assurance' for general information, 'QA: Weekly Meetings' for Guild meeting updates, 'QA: UI Test Automation' for discussions on test automation, and 'QA: Contributors' for information on contributing to QA efforts. This approach ensures a comprehensive and integrated quality assurance process throughout Mattermost's development lifecycle.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/quality/"
  },
  {
    "question": "What does the R&D Processes section of the handbook cover?",
    "answer": "The R&D Processes section of the handbook outlines key processes that are shared among multiple departments within the organization. Specifically, it covers processes relevant to Product, Engineering, Quality Assurance, Security, and Product Operations teams. One of the key topics mentioned in this section is Feature Labels, which provides information on the meaning of different feature status labels. This suggests that the R&D Processes section likely contains important information for cross-functional collaboration and project management within the company's research and development efforts.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/processes/"
  },
  {
    "question": "What are the different feature labels used by Mattermost and what do they indicate?",
    "answer": "Mattermost uses four main feature labels to indicate the status, maturity, and support level of each feature:    1. Experimental: This label indicates an early Proof of Concept (POC) with an unstable codebase, minimal QA, and potential UI issues. Security reviews are incomplete, making it unsuitable for production use. These features are typically not available in Cloud environments and may be discarded if their value is not proven.    2. Beta: Features labeled as Beta are in active development towards General Availability. They are not fully complete but have been reviewed by the security team. Beta features are suitable for a small set of customers behind a feature flag. Bugs are fixed on a best-effort basis, and no major breaking changes are anticipated. However, careful consideration is required for full production deployment.    3. General Availability (GA): GA features have undergone thorough validation and testing. They are feature-complete, meet quality standards, and have passed security reviews. GA features are suitable for widespread production deployment and adoption, offering stability and reliability with no expected disruptive changes.    4. Deprecated: This label is used for features officially marked for removal from the product. Deprecated features are no longer supported or actively maintained. Users are recommended to discontinue their use and migrate to alternative functionalities if the feature is still present in their deployed version.    These labels help users and administrators navigate product feature adoption with clarity and confidence, communicating the stage of development, level of readiness, and potential risks associated with each feature.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/processes/feature-labels"
  },
  {
    "question": "What are the main responsibilities and principles of the Site Reliability Engineering (SRE) team at Mattermost?",
    "answer": "The Site Reliability Engineering (SRE) team at Mattermost is responsible for ensuring the availability of Mattermost Cloud user-facing services across multiple environments. Their main responsibilities include:    1. On-call duties, incident management, and incident review    2. Change management    3. Influencing and encouraging best practices    4. Maintaining and updating documentation, training, and runbooks    5. Empowering developers with self-serve tools    6. Regularly reviewing reliability, quality, and cost KPIs    The SRE team operates under several key principles:    1. Being proactive rather than reactive    2. Being open and data-driven    3. Embracing risk and chaos    4. Promoting and embracing communication    5. Evangelizing cost-effectiveness    6. Adopting and promoting SRE and DevOps practices    Their vision is to enable developers to build reliable, scalable, and cost-efficient services that meet Mattermost Cloud customer's reliability targets (SLA, SLO) while keeping SRE principles in mind. The team works on various areas including reliability and resiliency, availability and cost optimization, automation, security, and documentation.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/organization/sre"
  },
  {
    "question": "What are the key components of the daily QA workflow at Mattermost?",
    "answer": "The daily QA workflow at Mattermost consists of five key components:\n\n1. PR reviews: QA team members review pull requests, following a specific process that includes reading through the PR and its associated Jira ticket, creating test builds if needed, establishing or verifying test plans, and approving or requesting changes.\n\n2. Jira tickets: QA personnel verify and close resolved Jira tickets, which involves testing according to test steps or plans, updating test cases in Zephyr, and ensuring proper documentation and traceability.\n\n3. Investigating and reproducing potential issues: QA team members investigate reports of potential issues that come through various channels.\n\n4. Submitting bug tickets: As issues arise during testing or investigation, QA submits new bug tickets to track and address these problems.\n\n5. Engaging with contributor questions: QA helps to answer questions and provide support to contributors in relevant channels.\n\nThese daily activities ensure continuous quality assurance throughout the development process, facilitating timely identification and resolution of issues while maintaining clear communication with developers and contributors.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/quality/qa-workflow"
  },
  {
    "question": "What are Product Team Hangouts and how are they structured?",
    "answer": "Product Team Hangouts are weekly, audio-only sessions introduced to promote social connections and build stronger team cohesion within the product organization. These hangouts are optional and take place via Zoom after the weekly R&D meeting on Thursdays at 10am PT. They involve the entire product team, consisting of 20 members across various roles including PM, UX, analytics, community, and tech writing. The sessions require no preparation and are designed for team members to casually interact. The initiative was set to launch on June 10, 2021, with the aim of fostering a more connected product team environment.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-team-hangouts"
  },
  {
    "question": "What is the process for reviewing failures in automated run groups in Rainforest?",
    "answer": "The process for reviewing failures in automated run groups in Rainforest involves several steps:\n\n1. Go to the Rainforest runs page and click on the run group you want to review.\n2. Click on the first failed test in the run group.\n3. The page will open and automatically scroll to the failed step, showing the corresponding UI on the right-hand side.\n4. If the reason for failure is not immediately clear, open the test and run a preview by clicking on the 'Open Test' option.\n5. In the test preview page, select all steps except the first two (which are typically for loading the VM).\n6. Click on 'Preview xx Actions' to start the automated preview of the test.\n7. If any step fails during the preview, determine why, recapture the screenshot, add a 'wait' step, or make other necessary adjustments.\n8. If the test passes in the preview but failed in the run, categorize it as 'Other' if the reason for failure is unclear.\n9. Use the 'Next Failure' or 'Previous Failure' options at the bottom of the screen to review other failures in the run group.\n\nThis process allows for a thorough review of automated test failures, helping to identify issues with the tests themselves or potential bugs in the software being tested.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/quality/rainforest-process"
  },
  {
    "question": "What are the main components covered in the Product section of the handbook?",
    "answer": "The Product section of the handbook covers several key areas of product development and management. These include:\n\n1. Product Planning Process\n2. Development Process\n3. Release Process\n4. How-to Guides for Product\n5. Product Management Team Handbook\n6. Product Design Team Handbook\n7. Product Management Areas of Ownership\n8. Technical Writing Team Handbook\n9. Growth\n10. Analytics\n11. Developer Relations\n12. Product Team Hangouts\n\nThis comprehensive list suggests that the Product section provides a holistic view of the entire product lifecycle, from planning and development to release and growth. It also includes specific handbooks for different teams involved in the product process, such as Product Management, Product Design, and Technical Writing teams. The inclusion of areas like Analytics and Developer Relations indicates a data-driven approach to product development and a focus on building strong relationships with the developer community.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/"
  },
  {
    "question": "What are the main objectives of the professional development tracks at Mattermost?",
    "answer": "The professional development tracks at Mattermost have three main objectives:\n\n1. Provide different professional development tracks that employees can use to grow their skills based on areas that are interesting to them in their career journeys.\n\n2. Be more prescriptive on how to spend the budget within the tracks, reducing barriers for employees to use the budget on professional development.\n\n3. Provide a process in which employees can be accountable for their own development and foster an environment of sharing their learnings.\n\nThese objectives aim to support employee growth, encourage the use of professional development resources, and create a culture of continuous learning and knowledge sharing within the organization.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/professional-development"
  },
  {
    "question": "What is the process for determining and updating software requirements for Mattermost?",
    "answer": "The Mattermost Software Requirements Process involves several steps to determine and update software requirements:\n\n1. Consult with Analytics to assess the impact on users and posts for versions being considered for dropped support.\n2. Inquire with the customer support team about potential impacts on customers using older versions.\n3. Consult with developers to understand the internal impact of dropping or continuing support for specific versions.\n4. If a decision is made to drop support for a version, coordinate with product managers and developers to update version information across all relevant platforms and documentation.\n\nFor specific software requirements:\n- Desktop Apps: Windows and Mac follow versions supported by Microsoft and Apple respectively, while Linux is fixed to Ubuntu LTS releases 16.04 or later.\n- PC Web Browsers: Chrome follows the Chromium version of the latest Mattermost Desktop App, Firefox and Safari follow their respective supported versions, and Edge uses the latest release.\n- Mobile Apps: iOS supports the latest and next-to-latest versions, while Android follows versions supported by Google.\n\nAll current software requirements are documented and regularly updated on the Mattermost website.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/software-requirements"
  },
  {
    "question": "What is the typical timeline for quarterly release planning at Mattermost?",
    "answer": "Mattermost follows a structured timeline for quarterly release planning, which typically spans about 10 weeks before the start of each quarter. The process is broken down into several key stages:\n\n1. Kick-off: 10 weeks before quarter start\n   - Timeline is shared with PM team and Working Group\n\n2. 1% draft (align on goals): 8 weeks before quarter start\n   - Reviewed by Working Group, Dev Leads, and Product & Engineering Leadership\n\n3. 50% draft (buy-in on prioritization): 5-6 weeks before quarter start\n   - Reviewed by CSM/SA/Support, Customer Advisory Board (in future), and Product and Engineering Leadership\n\n4. 99% draft (finalize): 3-4 weeks before quarter start\n   - Presented to the Executive team\n\n5. Live: 1 week before quarter start\n   - Shared internally and externally as needed\n\nThis timeline allows for thorough research, prioritization, and planning, ensuring alignment across different teams and stakeholders before the start of each quarter.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-roadmap-cadence"
  },
  {
    "question": "What are the main states in the Jira ticket lifecycle and how does a ticket progress through them?",
    "answer": "The Jira ticket lifecycle consists of several main states that a ticket progresses through linearly. The states are:    1. Backlog: Tickets are created and await triage.    2. Will Do: Tickets have been assigned a sprint and identified in triage as something to achieve.    3. To Do: Tickets are assigned to an implementer who intends to work on them soon.    4. In Progress: The implementer has begun working on the ticket.    5. Submitted: For tickets requiring code changes, a pull request has been opened.    6. Done: The pull request has been merged, triggering additional QA work.    7. Close: QA has verified that the change has been completed as anticipated.    Tickets typically progress through these states in order, but can move backwards if needed. For example, a ticket can move from 'Submitted' back to 'In Progress' if there are significant issues with the pull request. Additionally, tickets can skip certain states in urgent cases, such as critical bug fixes moving directly from 'Backlog' to 'In Progress'. The lifecycle also includes provisions for tickets that are decided not to be worked on, which can be moved to 'Done' from any state for reasons such as duplication, irrelevance, or changed priorities.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/jira-ticket-lifecycle"
  },
  {
    "question": "What are some key guidelines for staffing an event booth for Mattermost?",
    "answer": "When staffing an event booth for Mattermost, there are several important guidelines to follow:    1. Shifts: Implement a 'one hour on, one hour off' system to prevent burnout and allow staff to explore the event. Avoid having a single person working the booth alone.    2. Etiquette:        - Respect attendees' time, keeping most conversations to about 4 minutes unless the attendee shows interest in a deeper discussion.       - Avoid hard pitching, as it can be off-putting to potential clients, especially in tech-focused events.       - Be aware of cultural differences and adjust your approach accordingly.       - Assume everyone you interact with is an expert in their field, regardless of appearances.    3. Engagement: Define what constitutes an 'Event Engaged Attendee' for both virtual and in-person events. This helps in tracking meaningful interactions.    4. Preparation: Use assets like the Conference/Trip Report for post-event documentation.    5. Staffing Process: When inviting staff to events, allocate passes based on the event's goals and audience. Prioritize inviting those who have expressed interest, are geographically close, or have specific expertise relevant to the event.    These guidelines aim to ensure effective representation of Mattermost at events while maintaining a positive experience for both staff and attendees.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/developer-relations"
  },
  {
    "question": "What are some key practices for secure software development at Mattermost, particularly regarding dependency management?",
    "answer": "Mattermost emphasizes several key practices for secure software development, with a strong focus on dependency management:    1. Dependency Pinning: This is crucial to mitigate software supply chain attacks. It involves specifying explicit hash values for dependencies rather than using the latest versions.    2. For npm dependencies:       - Use 'npm ci' instead of 'npm install' in build scripts and automated pipelines.       - Prefer exact versions when adding new dependencies.    3. For Docker:       - Use tools like Dockpin to pin Docker base images to their current latest versions.       - A script is provided to update CircleCI yaml files with hashed image references.    4. For Go dependencies:       - When adding dependencies, specify versions, latest available versions, or commit hashes.       - Commit both go.mod and go.sum files to ensure consistent builds.    5. For GitHub Actions:       - Use tools like Stepsecurity to harden workflow specifications.       - Pin actions and restrict permissions in workflow files.    Additionally, Mattermost recommends:    - Setting up automated code security analysis tools like CodeQL.    - Performing manual code reviews that include SAST, SCA, and DAST.    - Ensuring no secrets are present in the git repository history.    - Maintaining a SECURITY.md file describing the security policy.    - Implementing branch protection policies.    These practices aim to enhance the security of the software development process and mitigate potential risks.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/secure-software-development"
  },
  {
    "question": "What does the 'Development Process' section of the handbook cover?",
    "answer": "The 'Development Process' section of the handbook provides information about the company's development planning and processes. It serves as a resource for team members to understand how software development is approached and managed within the organization. This section likely includes details on methodologies used, project planning stages, coding standards, testing procedures, and release cycles. It's an essential reference for both new and existing team members to align with the company's development practices and ensure consistency across projects.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/"
  },
  {
    "question": "What are the key considerations for implementing new product features on mobile clients in relation to web app features?",
    "answer": "When implementing new product features, there are several key considerations for mobile clients in relation to web app features:    1. Mobile app code changes: If web app repo code changes are needed (outside of the System Console UI), mobile code changes are likely required. The Mobile team PM should be involved in roadmap planning and quarterly OKR discussions.    2. Stakeholder involvement: For features involving mobile code changes, involve the Mobile PM and dev lead in all stakeholder checkpoints, including requirements gathering, design exploration, and final review.    3. Backward compatibility: Mobile releases must be compatible with at least all server versions back to the oldest supported ESR. Consider behavior on new servers with old apps and vice versa.    4. Variable network conditions: Account for potential API request failures due to variable network conditions on mobile. Default behaviors should be carefully chosen to avoid breaking core functionality.    5. Client performance impact: Consider the varying computing capabilities of mobile devices. Minimize and optimize requests, batch dispatches where possible, and avoid unnecessary tracking of requests to reduce computation time.    6. Feature parity: While not every web app feature needs parity with mobile, this should be discussed with Product Managers and UX team during the requirements gathering phase.    7. Authentication features: For features related to authentication (e.g., SSO), plan to release on Mobile Apps prior to Cloud to avoid user access issues.    These considerations ensure that mobile clients are given equal importance in the development process and that new features are implemented effectively across all platforms.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/mobile-feature-guidelines"
  },
  {
    "question": "What is the process for announcing deprecated features in Mattermost, and how is the removal target date determined?",
    "answer": "The process for announcing deprecated features in Mattermost involves several steps to ensure clear communication and adherence to the 'no surprises' principle. When a feature is to be deprecated, the responsible product manager adds the scheduled deprecation to the deprecated features page, prepares a forum post for community feedback, and creates a JIRA ticket for removal. The release manager then includes the deprecated features in the changelog and important upgrade notes, informs the marketing manager for inclusion in the release announcement, and ensures the deprecated features page is up-to-date before release.     Regarding the removal target date, it is typically set to the next major release (e.g., v4.0.0). There should be at least two months between the deprecation announcement and the removal, aligning with the security backport release policy. Exceptions may be made for security or performance impacts, potentially leading to earlier removal. For significant features, like APIv3 endpoints, the removal date might be extended to a later release. The policy aims to provide ample notice and stability for users and administrators.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/deprecated-features"
  },
  {
    "question": "What is Incident Collaboration in Mattermost and where can I find more information about it?",
    "answer": "Incident Collaboration in Mattermost is a feature designed to help teams work more effectively together during time-sensitive situations. It provides tools and workflows to manage and coordinate responses to incidents efficiently. For more detailed information, administrators can refer to the Mattermost Incident Collaboration Admin Guide, which is available in the official Mattermost documentation. Additionally, for those interested in the technical aspects or contributing to the project, the source code is publicly available on GitHub. The Admin Guide provides comprehensive instructions on setup, configuration, and best practices for using the Incident Collaboration feature, while the GitHub repository allows developers to examine the code, report issues, or potentially contribute to its development.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/incident-response"
  },
  {
    "question": "What is the purpose of a launch plan in Mattermost's marketing strategy, and how does it differ from a release plan?",
    "answer": "A launch plan in Mattermost's marketing strategy serves multiple purposes. Primarily, it aims to drive awareness in the market and expose target audiences who are not yet Mattermost customers to the company's products and offerings. Launches are also used to communicate Mattermost's position and strategic direction through stories put into the market. Unlike release plans or roadmaps, launches focus on highlighting the most exciting changes to the product. The key difference between a launch plan and a release plan is ownership and focus. The Marketing team owns the launch plan, while the Release team (R&D) owns the release plan. Additionally, the timing of a launch may differ from a release, depending on other organizational communications and events. Launches can be planned around new product offerings, highly demanded features, or a set of thematically connected features.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/launch-plan"
  },
  {
    "question": "What is the purpose of the 'Product Planning' section in the handbook?",
    "answer": "The 'Product Planning' section in the handbook is designed to provide information about the organization's product planning strategy and processes. It serves as a resource for team members and stakeholders to understand how product decisions are made, how roadmaps are developed, and what methodologies are used in the planning phase. This section likely covers topics such as market research, feature prioritization, resource allocation, and timeline development for product initiatives. By offering insights into these processes, the organization aims to ensure alignment across teams and transparency in product development efforts.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/"
  },
  {
    "question": "How do different teams utilize the Fix Version field in Jira, and what are its primary purposes?",
    "answer": "The Fix Version field in Jira is utilized by various teams for different purposes:    1. Developers:       - It appears on individual tickets in the backlog view.       - For Story tickets, it provides soft guidelines for release targeting.       - For Bug tickets, it helps prioritize bugs based on the release cycle stage.    2. Product Managers:       - Used to prioritize the backlog.       - Helps estimate and plan which Story tickets will ship in specific releases.    3. Release Manager:       - Monitors the status of resolved, open, and submitted tickets for the current release.       - Compiles various release metrics.    4. Quality Assurance:       - Prioritizes testing of tickets and associated PRs for upcoming releases.       - Assesses release completeness before final cuts.       - Tracks when changes were implemented to aid in bug investigation and expected behavior analysis.       - Generates reports on issues, changes, and tests by release.    The Fix Version field serves as a crucial tool for cross-team collaboration, release planning, and quality control throughout the development process.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/new-bug-tickets/jira-fix-versions"
  },
  {
    "question": "What are the severity levels for bug tickets in Mattermost, and how are they defined?",
    "answer": "Mattermost uses three severity levels for bug tickets: S1, S2, and S3. These are defined based on the 'scale' of impact:    1. S1 (Highest severity): These bugs cause data loss or crashes, preventing app use entirely. For example, if Mattermost crashes when posting a message. S1 bugs are the only ones that can be committed after the T-10 Code Freeze deadline.    2. S2 (Medium severity): These bugs result in functionality loss or glaring UI regressions. They affect most users' functionality, such as being unable to favorite a channel. S2 bugs, along with S1 bugs, can be committed after the Code Complete deadline until the T-10 Code Freeze.    3. S3 (Lowest severity): These are minor issues or cosmetic UI regressions that affect half or less than half of users' functionality. An example would be a System Admin being unable to create custom emoji.    The severity level is assigned by the ticket reporter using the 'Severity' field. It's worth noting that bugs may sometimes be assessed on a case-by-case basis, considering factors such as whether the bug is a recent regression, how risky the fix is, or if it's more effective to revert the code that caused the bug.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/new-bug-tickets/bug-severity-guidelines"
  },
  {
    "question": "What is the difference between a release plan and a roadmap in product development?",
    "answer": "A release plan and a roadmap serve different purposes in product development. A release plan outlines specific features, work items, and tasks targeted for a particular product release, including major bugs, smaller features, and tasks required to complete a feature set. It provides a holistic view of what all R&D teams propose to work on for a given release. In contrast, a roadmap typically lays out the broader direction and prioritization of the product, including larger objectives and major features. The roadmap is more strategic and long-term focused, while the release plan is more tactical and focused on immediate upcoming releases. Release plans are usually more detailed and subject to change based on factors like work estimation accuracy and quality issues discovered during testing.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/release-plan"
  },
  {
    "question": "What are the key principles guiding Mattermost's product development approach?",
    "answer": "Mattermost's product development approach is guided by several key principles:    1. Product Direction not Roadmap: The company is customer-obsessed and maintains an agile development process. They view roadmapping and product development as living processes that can adapt to changing customer needs.    2. Collaborative Product Design: Mattermost earns trust by welcoming input from all core staff and community members on various aspects of the product, including technical solutions, user interface design, user experience, and functional behavior.    3. MVP and Iteration: The company is self-aware and focuses on high-impact changes. They develop Minimum Viable Products (MVPs) to gather data and inform future work, ensuring they create solutions for real customer pain points.    4. Quality as a First-Class Citizen: Mattermost insists on high standards and takes ownership of their work. They maintain a high-quality bar for their product, following thorough testing processes and prioritizing critical fixes when issues are discovered.    These principles are built upon Mattermost's leadership principles and aim to align the R&D team on their approach to product development while providing insight to customers about the company's actions.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/product-philosophy-and-principles"
  },
  {
    "question": "What is the Release Planning Cadence in software development?",
    "answer": "The Release Planning Cadence refers to the structured schedule and process for planning and executing software releases. It typically involves a series of coordinated activities and milestones that teams follow to ensure timely and efficient delivery of new features, improvements, and bug fixes. This process may include phases such as feature prioritization, sprint planning, development cycles, testing, and deployment. A well-defined release planning cadence helps teams maintain a consistent rhythm of deliverables, manage stakeholder expectations, and align development efforts with business goals. However, without more specific information from the content, it's not possible to provide details about any particular organization's release planning cadence.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/release-planning-cadence"
  },
  {
    "question": "What are the key components required when creating a new Jira bug ticket for Mattermost?",
    "answer": "When creating a new Jira bug ticket for Mattermost, several key components are required:    1. Steps to reproduce: Detailed instructions on how to replicate the issue.    2. Expected behavior: A description of what should happen under normal circumstances.    3. Observed behavior: A detailed account of the actual issue, including relevant error messages and screenshots.    4. Severity: An appropriate severity level chosen from the drop-down menu, based on documented guidelines.    Additional helpful information includes:    - Labels: Such as 'customer-bug' or 'community-bug' if applicable.    - Environment: Specifying where the bug was found (e.g., Cloud test servers, Self-Hosted production servers, Desktop app).    - Attachments: Screenshots or videos demonstrating the issue.    - Possible fixes: Links to potentially responsible code, if known.    - Regression information: Results of retesting on a previous Mattermost version.    - Relevant details: Server version, OS, mobile/desktop app version, and notable configurations.    Before creating a ticket, it's important to ensure you have the necessary permissions, confirm it's a new issue by searching existing tickets, and verify it's not a confidential matter. If the team responsible for fixing the bug is known, the ticket can be assigned directly; otherwise, it can be left unassigned for the Program Manager to handle.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/development-process/new-bug-tickets/"
  },
  {
    "question": "What is the purpose of the Archive section in the Mattermost handbook?",
    "answer": "The Archive section in the Mattermost handbook serves as a repository for archived files and folders specifically related to the Product section. This area is likely used to store historical or outdated information that is no longer actively used but may still be valuable for reference or record-keeping purposes. By maintaining an archive, Mattermost ensures that important product-related documents and data are preserved, even if they are not currently relevant to day-to-day operations. This practice can be beneficial for tracking the evolution of product development, maintaining institutional knowledge, and potentially retrieving information for future needs or audits.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/archive/"
  },
  {
    "question": "How has Mattermost changed its approach to community-managed documentation, and where can it be found now?",
    "answer": "Mattermost has changed its approach to community-managed documentation by moving it from the product documentation to a dedicated forum category. Previously, community-written content was included in the official product documentation, which caused confusion as it wasn't officially supported by Mattermost. Now, existing and new community-written documentation is hosted in the 'Unofficial Product Documentation' category on the Mattermost Forum. This change addresses the confusion and allows for better engagement and interaction with the content. The new process encourages community members to submit their documentation as new threads in this forum category, where they can receive notifications about activity on their posts and interact with other users. This approach also facilitates the potential incorporation of well-tested community documentation into official product documentation.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/archive/community-documentation-process"
  },
  {
    "question": "What are the three different roadmap views used by Mattermost and how do they differ in their purpose and target audience?",
    "answer": "Mattermost uses three different roadmap views, each with a specific purpose and target audience:    1. Public Product Direction: This is an external-facing view shared publicly with users, community, and customers. It's available on the Mattermost website and focuses on communicating the product vision and direction without committed dates. It highlights the benefits of upcoming features and includes estimated timelines categorized as 3+ Months, 6+ Months, and Future Consideration.    2. Internal Roadmap: This view is internal-facing, shared across Mattermost staff. It shows how product efforts relate to higher-level company goals and strategy. Unlike the Public Product Direction, this view is framed in terms of business goals (such as increasing NPS, ARR, retention) and may include internal business initiatives not directly beneficial to customers.    3. Release Plan: This is also an internal-facing view, providing a month-by-month plan of new features. It's used for project management by development teams and contains target dates (not commitments) for feature releases. The Release Plan is updated weekly by the Product Management team.    The key differences lie in their target audience (external vs. internal), the level of detail provided, and how the information is framed (customer benefits vs. business goals vs. development timelines).",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/roadmap-views"
  },
  {
    "question": "How does Mattermost's release planning process incorporate agile methodology, time-based releases, and release planning cadence?",
    "answer": "Mattermost's release planning process incorporates three key characteristics: agile development cycle, time-based releases, and release planning cadence.     For the agile development cycle, Mattermost uses an iterative approach that allows for continuous feedback and prioritization adjustments. The release plan is treated as a living document, with the current quarter's plan typically locked, the next quarter's work queued but flexible, and work planned beyond two quarters highly adaptable.    Regarding time-based releases, Mattermost releases on predetermined dates rather than when specific features are completed. This approach increases predictability for organizations planning upgrades, enables frequent iteration, and aligns well with open-source community contributions.    The release planning cadence at Mattermost consists of yearly fiscal and long-term strategy planning, quarterly release plan and OKR planning, and monthly OKR status check-ins. Before each quarter, they lock plans for 'What's Launching' (key initiatives to work on with Marketing) and 'What's In Progress' (initiatives starting but may not ship that quarter). They also maintain a flexible 6-12 month backlog that's updated quarterly based on company strategy, product goals, community needs, and market conditions.    This approach allows Mattermost to balance predictability with flexibility, ensuring they can adapt to changing needs while maintaining a consistent release schedule.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/release-planning-process"
  },
  {
    "question": "How does Mattermost track and prioritize feature requests from customers and the community?",
    "answer": "Mattermost uses two primary tools to track and prioritize feature requests:    1. Productboard: This internal tool is used for tracking paid customer feature requests. Customer-facing teams can add notes to Productboard based on a specific process. The Product Management team reviews this feedback weekly to guide product direction and feature roadmap development.    2. Uservoice: This platform is used for the open-source community to submit requests or upvote existing ones. It's specifically a Community Feature Proposal Forum where users of free deployments can propose new feature ideas, share improvements, and connect with other members to refine their proposals. The Community Manager reviews this feedback weekly and shares key trends with the Product team.    Additionally, Mattermost has a Customer ProductBoard portal where paying customers can directly connect with the product team, share the importance of improvements, submit new ideas, and provide use cases. This information is crucial for prioritizing features that are most important to their ideal customer profile (ICP).    The Product Management team uses the information from both customers and the community to prioritize features for the roadmap. They emphasize capturing the 'why' behind feature requests, often encouraging users to write in the form of an 'Experience Report' which details what the user wanted to do, what they actually did, and why that wasn't ideal.    In cases where a deal is dependent on a concrete timeline for a feature, there's an escalation process where the Sales team can provide specific details about the request, timeline, deal size, and other factors for the Product Management team to evaluate and potentially commit to a timeline.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/feature-requests"
  },
  {
    "question": "What are the main areas of responsibility for Mattermost Technical Writers?",
    "answer": "Mattermost Technical Writers have several key areas of responsibility, including:\n\n1. Writing, editing, structuring, and maintaining Mattermost technical and product documentation.\n2. Creating end user documentation for Mattermost Channels, Boards, and Playbooks.\n3. Developing and maintaining developer documentation.\n4. Contributing to and maintaining the company Handbook.\n5. Managing in-product microcopy.\n6. Providing editorial reviews for all documentation across the organization.\n7. Working closely with the community to improve documentation.\n\nTheir work covers various verticals such as Channels (including Cloud and self-managed deployments), Playbooks, Boards, Calls, Growth, Self-service, and the Apps Framework and Marketplace. They are also responsible for documentation metrics, in-product messaging and interface, GitLab documentation, and community and doc review processes.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/"
  },
  {
    "question": "How can community members contribute to Mattermost documentation?",
    "answer": "Community members can contribute to Mattermost documentation in several ways:    1. Submit documentation with PRs: When submitting a code PR, include updated documentation if applicable. This can be in the form of a bullet list or outline. Label the PR as 'Docs Needed/Editor Review' and tag the appropriate editors.    2. Help with feature documentation: Although this is primarily handled by Product Managers and Technical Writers due to time constraints, community members can assist if they can meet the deadlines.    3. Work on Help Wanted tickets: These are more flexible in terms of timeline. Community members can find these tickets in the Mattermost docs repository labeled as 'Help Wanted'.    4. Contribute to engineering/developer documentation: As part of the development process, contributors are encouraged to update or create relevant documentation and include it in their PRs.    The documentation team provides support and feedback during the review process to ensure contributions align with the Documentation Style Guide. Community members can also seek help in the Documentation channel on the Mattermost community server.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/writing-community-documentation"
  },
  {
    "question": "How does Mattermost prioritize work in their product development process?",
    "answer": "Mattermost prioritizes work based on several factors and principles:    1. Maintaining high-quality production functionality: Priority is given to work that keeps the product functioning at a high level in production.    2. Alignment with strategies and goals: New features are prioritized based on how well they support company strategies and product goals.    3. Value vs. Cost principle: A high-level principle driving prioritization is the value of the feature compared to the cost of development.    4. RICE model: Mattermost uses the RICE (Reach, Impact, Confidence, Effort) scoring model to measure and prioritize features. Features that improve the product for a large number of end-users, make a significant daily difference, and are low risk and effort are likely to be prioritized.    5. Community and customer feedback: Input from both the open-source community and paying enterprise customers is valued equally and can influence prioritization decisions.    6. Quarterly planning: Prioritization is typically locked in for a quarter to maintain development flow, with some flexibility for the following quarter and more significant changes possible for work planned beyond two quarters.    7. Types of work considered: The prioritization process includes various types of work such as security fixes, bugs, features, UX improvements, and technical debt.    This approach allows Mattermost to balance immediate needs, strategic goals, and community feedback in their product development process.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-planning/prioritization-process"
  },
  {
    "question": "What are the main workflows for technical writing in the Mattermost documentation process?",
    "answer": "The Mattermost documentation process involves three main workflows:\n\n1. General workflow: This is used for day-to-day work, ad-hoc editing, and adding new content. It involves creating a branch off 'master', making changes, and submitting a pull request for review.\n\n2. Staging workflow: This is used for large documentation projects that require testing and previews before merging. It involves working in a 'staging' branch, which is a branch off 'master'. Changes are made in separate branches off 'staging', reviewed, and then merged into 'staging' for preview before eventually being merged into 'master'.\n\n3. Release documentation workflow: This is specific to release documentation. It involves working in a 'vx.xx Documentation' branch, where x.xx represents the version number. Similar to the other workflows, changes are made in separate branches and then merged into the release documentation branch.\n\nEach workflow has specific steps for adding new content and editing existing content, including creating branches, making changes, committing files, and creating pull requests. The workflows also involve using GitHub's preview functionality to review changes before they are merged.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/product-technical-writing-workflows"
  },
  {
    "question": "What are the primary goals when writing copy for product messaging in Mattermost's user interface?",
    "answer": "When writing copy for product messaging in Mattermost's user interface, there are five primary goals:\n\n1. Write with empathy: This involves understanding and addressing the user's needs and emotions.\n\n2. Provide context: Ensure that the user understands why certain information is being presented or why an action is necessary.\n\n3. Help users build mental models: Assist users in understanding how the system works and how different parts relate to each other.\n\n4. Reduce cognitive load: Simplify information and interactions to make the user experience less mentally taxing.\n\n5. Proactively prevent failure: Anticipate potential issues and provide guidance to help users avoid errors or problems.\n\nIn addition to these goals, the content prioritizes plain language, readability, and consistency. This approach aims to make the user interface more friendly, accessible, and effective in guiding users through the product.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/user-interface-text-guidelines"
  },
  {
    "question": "What are the main areas of responsibility for Mattermost Technical Writers?",
    "answer": "Mattermost Technical Writers are primarily responsible for writing, editing, and maintaining technical documentation across several key areas. These include:\n\n1. Messaging: This covers the Mattermost Overview, User's Guide, Administrator's Guide, Mattermost Cloud, Apps Framework and Marketplace, self-managed deployments, and messaging features and functionality.\n\n2. Incident Collaboration\n\n3. Focalboard\n\n4. Growth: Including Customer Portal and Telemetry\n\n5. Mattermost Handbook\n\n6. Integrations: Covering Admin Guide, plugin documentation, and developer journey\n\n7. GitLab documentation: For GitLab Mattermost docs and GitLab helm chart docs\n\n8. Developer documentation: This includes developers.mattermost.com, api.mattermost.com, and general developer experience docs\n\n9. Documentation metrics: Such as docs page ratings, Google Analytics metrics, customer feedback analysis, and metrics dashboards\n\n10. In-product messaging and interface\n\n11. Community and doc review process\n\n12. Content and processes: Including PR reviews across the organization and documentation processes for release PRs\n\nThe technical writers are also involved in various documentation processes, such as contributing to documentation, submitting feature documentation, and managing documentation requests via the Doc Up plugin.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/archive/product-technical-writing-team-handbook"
  },
  {
    "question": "How can developers and contributors engage with the Technical Writing team at Mattermost?",
    "answer": "Developers and contributors can engage with the Technical Writing team at Mattermost through several channels:\n\n1. The Documentation Working Group (DWG) channel: Use the hashtag #docsteam to get their attention.\n2. GitHub PR: Submit a pull request for content that needs review. The team expects to provide feedback quickly and may make editorial changes.\n3. DocUp: Use this plugin within community.mattermost.com to create a GitHub issue directly from a message. This is delivered to the docs repo, and the team will acknowledge and provide next steps promptly.\n4. Manual GitHub issue creation: Create an issue in the Docs repo, making sure to tag a team member for visibility.\n5. Group Message: Use this for formalizing discussions from calls or meetings.\n\nThe team emphasizes the importance of following these processes to help them prioritize and ensure coverage for all work. They also note that documentation related to a release needs to be complete at least 10 days prior to the release date.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/work-with-us"
  },
  {
    "question": "What are the main objectives of Mattermost's terminology standardization project, and how does it impact different aspects of their content?",
    "answer": "Mattermost's terminology standardization project, which began in 2022, has several key objectives and impacts various aspects of their content:    1. Headings: Standardizing headings to sentence case to improve readability, align with industry standards, and reduce friction for contributors.    2. System Console text: Changing all text in the System Console to sentence case for consistency.    3. Product and plan references: Standardizing how Mattermost refers to its products, plans, and usage mechanisms.    4. Word casing: Changing the casing of words to lowercase where appropriate.    5. Edition and License page: Making the System Console's Edition and License page more consistent and clear.    6. UI text library: Creating a library of terms and strings for teams and external partners to use in mockups, designs, wireframes, and integrations.    The project impacts various content areas, including the Mattermost website, developer documentation, Handbook, integrations content, and in-product text. The in-product text changes are being implemented incrementally, starting with the System Console menu layout in Q3 2022, in consultation with QA and Localization teams.    Additionally, the project aims to standardize the casing of icons, features, apps, and services, generally moving towards lowercase to make proprietary items stand out. The project also clarifies product terminology, emphasizing that all Mattermost products are subscription plans, with self-hosted deployments requiring a license file activation.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/our-terminology"
  },
  {
    "question": "What are the main responsibilities of Product Designers at Mattermost according to the Product Design Team Handbook?",
    "answer": "According to the Product Design Team Handbook, Product Designers at Mattermost have several key responsibilities:    1. They work with Product Managers to carry out the strategic priorities of the product.    2. They are responsible for ensuring the product is designed to meet customers' and users' needs.    3. They must understand patterns and experiences across a broad range of input from different clients and users, each with their own specific requirements, use cases, and preferences.    4. They focus on exploiting value in areas that will provide the greatest impact for the largest audience.    5. They interact with all departments and areas within the organization to ensure the success of the product, despite being organized within the R&D area.    The handbook emphasizes that Product Designers play a crucial role in bridging user needs with product strategy, requiring a deep understanding of both customer requirements and broader product goals.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-design-team-handbook/"
  },
  {
    "question": "What is the Mattermost Docathon 2021 and how are contributions evaluated?",
    "answer": "The Mattermost Docathon 2021 is a hackathon for product documentation held from July 26th to August 6th 2021. It aims to involve the Mattermost community in improving product documentation. Contributions are evaluated based on their validity, quality, and impact. A valid contribution fixes an error, improves existing content, or adds value to the product documentation. Good contributions solve known problems, fill gaps, offer fresh perspectives, or clarify existing content. Great contributions are assessed on four attributes: impact (relevance to Mattermost documentation), quality (usefulness and ease of implementation), ambition (addressing issues in better ways), and innovation (offering something new or unexpected). The top five contributions will receive AirPod Pro headphones, while contributors with merged PRs will receive swag packs and potentially LinkedIn/GitHub endorsements.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/docathon-2021/"
  },
  {
    "question": "What are the recommended approaches for choosing contributions during the Mattermost Docathon?",
    "answer": "The Mattermost Docathon recommends several approaches for choosing contributions that are a good match for participants' skills and experience:    1. A technology you want to learn: This allows contributors to expand their knowledge while contributing.    2. A topic you know well: Leveraging existing expertise can lead to high-quality contributions.    3. An update you think will help other documentation visitors: This focuses on improving user experience.    4. Updates or corrections to documentation pages you use often: This allows contributors to improve content they're familiar with.    The guidance emphasizes that contributors should choose tasks that align with their skills or interests, but also encourages stepping out of comfort zones to take on new challenges. The goal is to ensure participants enjoy the Docathon while producing valuable contributions. It's important to note that contributors are not expected to strictly adhere to the style guide, as the Mattermost team will handle necessary stylistic edits during the review process.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/docathon-2021/docathon-processes"
  },
  {
    "question": "How does the role of a Technical Writer evolve from Level 1 to Level 9 in terms of ownership and influence?",
    "answer": "The role of a Technical Writer evolves significantly from Level 1 to Level 9 in terms of ownership and influence:    Level 1-2 (Technical Writer I): At these entry levels, writers execute high-quality documentation and in-product text updates. They work under detailed instruction and collaborate with peers.    Level 3-4 (Technical Writer II): Writers begin to design and lead high-impact information architectures and documentation improvements across their area of ownership. They work more independently and participate in cross-functional groups.    Level 5-6 (Senior Technical Writer): At this level, writers set and deliver vision for documentation architecture across all product lines. They are recognized as technical writing authorities and can make independent decisions on complex topics.    Level 7 (Staff Technical Writer): Writers consult on technical writing and documentation repository vision, strategy, and innovations. They are sought out by leadership for opinions on documentation and technical writing decisions.    Level 8 (Principal Technical Writer): At this level, writers own and define long-term technical writing practice vision and strategy. They are seen as experts in their product area and technical writing practice, engaging with peers in customer and partner organizations.    Level 9 (Distinguished Technical Writer): At the highest level, writers innovate new strategies to vastly improve technical writing practice at the company. They work across a broad set of technical and non-technical efforts, and are relied upon as key resources for stakeholders both inside and outside the organization.    Throughout these levels, the scope of ownership expands from executing specific tasks to shaping company-wide strategy, while influence grows from working with immediate peers to engaging with leadership and external partners.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/writer-levels"
  },
  {
    "question": "What is the purpose of this section in the Mattermost handbook?",
    "answer": "This section is designed to provide key resources specifically for the Growth Product team at Mattermost. It serves as a centralized location where team members can access important information, guidelines, and tools relevant to their work in driving product growth and user acquisition. By offering these resources, Mattermost aims to support and empower its Growth Product team in their efforts to expand the platform's user base and enhance overall product adoption.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/growth/"
  },
  {
    "question": "How does the 'Ownership' competency evolve across different Product Designer levels at Mattermost?",
    "answer": "The 'Ownership' competency, which relates to the scope of work a Product Designer is expected to handle, evolves significantly across different levels:    1. At Level 1 and 2 (Product Designer I), designers execute on defined projects or tasks in their area of focus, with limited direction at Level 2.    2. At Level 3 and 4 (Product Designer II), they start to influence and execute defined projects or tasks and features across the product.    3. Senior Product Designers (Levels 5 and 6) influence product vision for high impact features and design changes across the product.    4. Staff Product Designers (Level 7) consult on product vision and strategy for product area, roadmap, and innovations across teams.    5. Principal Product Designers (Level 8) define product design and direction for entire product suites or product divisions.    6. Distinguished Product Designers (Level 9) shape and define product design and new features and products for Mattermost, translating learnings from the broader product design world to bring value to Mattermost's customers and community.    This progression shows a clear increase in the scope of ownership and influence, from executing defined tasks to shaping the entire product design direction of the company.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-design-team-handbook/product-design-levels"
  },
  {
    "question": "What are the criteria for a workspace to be considered a Product Qualified Lead (PQL) in Mattermost as of May 10, 2022?",
    "answer": "According to the v1 PQL definition as of May 10, 2022, a workspace or instance is considered a Product Qualified Lead (PQL) if it is actively using Mattermost and meets one or more of the following criteria:\n\n1. Hand Raisers: This category includes workspaces that have either requested to get in touch with sales / requested a quote, or activated an enterprise trial (for self-hosted instances only).\n\n2. Upgrade Action: This applies to workspaces that self-serve upgrade to a Professional plan.\n\n3. Usage-Based: This category is met if the workspace has either 25 Daily Active Users (DAU) or 2,000 posts.\n\nThese criteria are designed to identify workspaces that show potential for conversion to paid plans or higher-tier services based on their engagement with the platform and expressed interest in enterprise features.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/growth/pql"
  },
  {
    "question": "What are the main product areas and their respective design owners in Mattermost's product design team?",
    "answer": "Mattermost's product design team has several key areas of ownership, each with a designated design owner:    1. Channels: Includes features like Chat, Search, Notifications, Status, User settings, Onboarding, and Mobile. Design owner: Matt Birtch.    2. Playbooks: Covers Incident response collaboration, Checklists, and Retrospectives. Design owner: Abhijit Singh.    3. Boards: Encompasses Boards, Tasks, and Focalboard. Design owner: Asaad Mahmood.    4. Calls: Focuses on Audio & video calls. Design owner: Tanmay Singh.    5. Apps & Integrations: Includes Plugins, Apps, Apps Marketplace, and Apps & Plugin Framework. Design owner: Matt Birtch.    6. Growth: Covers Product-led growth, Trials, In-product & Email Nurtures, Packaging & Pricing, and A/B Testing Framework. Design owner: Anneliese Klein.    7. Self-Service: Includes Upgrade/Downgrade Path, Billing, Purchases/Customer Portal, and Licenses. Design owner: Anneliese Klein.    8. Users & Teams: Encompasses User Invite, User Sign-in/Authentication, User Roles, User & Team Management, User Groups, and User Settings. Design owner: Anna Pohorielova.    9. Compass: Focuses on the Design system. Design owner: Michael Gamble.    This structure ensures that each major product area has a dedicated design owner responsible for overseeing and guiding the design efforts in their respective domains.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-design-team-handbook/product-design-ownership-areas"
  },
  {
    "question": "What is the process for submitting feature documentation at Mattermost, and who is involved?",
    "answer": "The feature documentation process at Mattermost is a collaborative effort involving Product Managers, Developers, and Technical Writers. The process begins with code PRs, which form the basis of feature changes or new features. If a code PR is for a new feature, major update, or a fix impacting current documentation, a documentation update is recommended.     Product Managers are encouraged to write MVP (Minimum Viable Product) documentation for their product/feature. They can use the Mattermost PM feature template to capture details about new features and functionality. This MVP documentation typically includes:    1. A link to the feature's tech spec    2. Links to relevant Jira/GitHub issues    3. A description of the product/feature/update    4. Steps for processes or procedures    5. FAQs or troubleshooting questions    6. Limitations or known issues    7. Configuration settings and examples    8. Suggestions for placement in the docs    Developers can also update documentation directly by either updating the relevant page on docs.mattermost.com or submitting new documentation as part of their code PR or as a separate PR in the docs repo.    The documentation then goes through a review process, which includes an editorial review, a PM review, and sometimes a dev review. Specific reviewers are recommended for different topics, such as Carrie Warner or Justine Geffen for editorial review, and various Product Managers and Dev leads for their respective areas.    Once the review is complete, the documentation is moved to the appropriate part of docs.mattermost.com and merged. The process ensures that feature documentation is complete and submitted in time for the release cycle, allowing for proper review and inclusion in the release documentation update.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/technical-writing-team-handbook/writing-feature-documentation"
  },
  {
    "question": "What are the main product areas and their respective PM owners in Mattermost's product management structure?",
    "answer": "Mattermost's product management structure is divided into several key areas, each with a designated PM owner:    1. Core Product 1: Owned by Ian Tao, covering features like Channels, Posts, User Account settings, User Statuses, Team Management, Calls, and Compliance.    2. Core Product 2: Owned by Winson Wu, responsible for Playbooks, Boards, User invites, User Groups, Insights, User Management, and Guests.    3. Apps & Integrations: Managed by Sandy Atkinson, overseeing Plugins, Apps, Apps Marketplace, Apps & Plugin Framework, Webhooks, Slash commands, and Bots.    4. Growth: Led by Eric Sethna, focusing on Onboarding, User invites, NPS plugin, Feedback widgets, In-product notices, and Onboarding nurtures.    5. Self-Service: John Lugtu is responsible for Trials, Cloud Evaluations, Upgrade/Downgrade Path, Billing, Purchases/Customer Portal, and Licenses.    6. Platform & Distribution: Owned by Neil Barnett, covering Self-hosted deployment, Server Configuration, Scale, High Availability, Database, File Storage, Security, Logging, Kubernetes, and Omnibus.    This structure ensures that each critical aspect of the product has a dedicated owner, allowing for focused development and management across the entire Mattermost ecosystem.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-management-team-handbook/product-ownership-areas"
  },
  {
    "question": "What are the key steps in Mattermost's A/B Testing methodology?",
    "answer": "Mattermost's A/B Testing methodology consists of several key steps:    1. Defining the Goal/Objective: Clearly articulate the behavior you're trying to influence, the direction of that influence, and the method for achieving it.    2. Establishing Success Criteria: Determine the metric or measure you're trying to influence, the direction of influence, and whether it can be compared to historical benchmarks.    3. Formulating Hypotheses: Determine the null and alternative hypotheses. The null hypothesis states that the intervention will have no effect, while the alternative hypothesis specifies the expected change.    4. Determining Minimum Detectable Effect Size (MDE): This is the minimum relative change between test and control means to justify the changes. It affects the required sample size.    5. Calculating Sample Size: Determine the minimum required sample size to produce statistically significant results, considering factors like confidence level, statistical power, and MDE.    6. Design & Implementation: Simplify test changes, minimize the number of test variations, monitor data collection for equal distribution, and close the test once adequate confidence and statistical power are reached.    7. Analyzing Results: Calculate mean values of the target metric, variance and standard deviation for each group, calculate p-value, and reject or accept the null hypothesis based on the results.    This methodology ensures a systematic and statistically sound approach to A/B testing, allowing Mattermost to make data-driven decisions about product changes and improvements.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/growth/ab-testing"
  },
  {
    "question": "What are the key objectives and activities for a new Product Manager during their first 30 days at Mattermost?",
    "answer": "During the first 30 days, a new Product Manager at Mattermost has the objective of building foundational knowledge of the company, product, and market. The key activities and focus areas include:    1. Learning about users and customers:       - Joining customer calls and logging detailed notes in Salesforce       - Learning about Mattermost Support processes and systems       - Understanding Customer Success processes and challenges    2. Product knowledge:       - Studying product features, functions, and technical aspects       - Reviewing product direction and company goals       - Understanding the technical architecture    3. Market and competitive landscape:       - Learning about Sales and Marketing team priorities       - Conducting mini competitive research analysis on products like MS Teams, Slack, and Discord    4. Team and processes:       - Meeting with various team members and understanding their roles       - Learning about product development processes, including design, QA, and release processes       - Participating in feature team meetings and contributing where possible    5. Practical contributions:       - Answering at least one question during community support in the Mattermost forum       - Documenting areas of improvement in their area of ownership       - Updating the onboarding document with helpful information for future new PMs    These activities are designed to give the new Product Manager a comprehensive understanding of Mattermost's ecosystem and prepare them for taking on more responsibilities in their role.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-management-team-handbook/pm-onboarding"
  },
  {
    "question": "What are some key strategies for managing bug bashes during a software release process?",
    "answer": "Bug bashes are an important part of the release process, especially for major releases. Here are some key strategies for managing bug bashes:    1. Timing: Run bug bashes at least for major releases, typically before the release date.    2. Organization: Use a playbook to structure the bug bash, such as the example provided in the content.    3. Assignment: Product Managers can assign specific testing areas and testers using the playbook's checklist.    4. Environment selection: Decide on the environments to test, which typically include community or rc.test.mattermost.com, as well as Mobile and Desktop app environments.    5. Scheduling: Set specific date(s) for the bug bash and announce it when it starts.    6. Community involvement: Invite community members to participate in the bug bash for broader testing coverage.    7. Triage: Assign a triage owner (usually the Release Manager) to review reported issues and determine what to fix for the upcoming release.    8. Issue management: Open and assign tickets to teams based on the triage results.    These strategies help ensure a comprehensive and organized approach to identifying and addressing bugs before the final release.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/release-tips"
  },
  {
    "question": "What are the core areas of responsibility for a Product Manager at Mattermost?",
    "answer": "According to the Product Management team handbook, there are six core areas of responsibility for a Product Manager at Mattermost:\n\n1. Problem Definition: This involves listening to customers and users to understand their problems, documenting problem statements and use cases, conducting competitive analysis and market research, and drafting 1-pagers and PRFAQs.\n\n2. Strategy Alignment: Product Managers need to determine how problem statements align with the company's direction and mission, prioritize solving problems, and drive alignment on the importance of priorities.\n\n3. Solution Definition & Validation: This includes working with design and engineering to find solutions, representing the voice of the user/customer, writing spec documents, producing wireframes and user flows, and validating solutions with users and customers.\n\n4. Solution Scheduling & Development: Product Managers work with developers, designers, and QA teams to negotiate scope, resolve challenges, and ensure features meet quality standards.\n\n5. Solution Release: This involves working with the Release Manager and Marketing to prepare customer and internal enablement materials, ensuring go-to-market readiness, and preparing release announcements.\n\n6. Solution Adoption: Product Managers advocate for the adoption of new features, monitor feedback, and iterate on improvements to enhance the user experience.\n\nThese responsibilities cover the entire product lifecycle from problem identification to solution adoption, ensuring that Product Managers are involved in all aspects of product development and success.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-management-team-handbook/"
  },
  {
    "question": "How does the level of supervision change as a Product Manager progresses through different levels?",
    "answer": "The level of supervision required for a Product Manager decreases as they progress through different levels, reflecting an increase in autonomy and ability to handle complex tasks independently. At Level 1 (Product Manager I), they receive detailed instruction on most tasks. By Level 2, they receive general instruction on day-to-day work and detailed instruction only on new or unfamiliar tasks. At Level 3 (Product Manager II), they receive general instruction on new assignments. Level 4 Product Managers receive minimal instruction. Senior Product Managers at Level 5 can define new feature assignments for themselves without requiring help. At Level 6, they can define assignments for other team members. Staff Product Managers (Level 7) can define assignments for members of other teams. Principal Product Managers (Level 8) independently define assignments across teams working on the same product or system. Finally, Distinguished Product Managers (Level 9) can conceive, design, explain, and oversee product direction for nearly any feature or product with no outside direction, executing cross-team and cross-function efforts with little to no supervision.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/product-management-team-handbook/pm-levels"
  },
  {
    "question": "What is the timeline for the Mattermost mobile app release process?",
    "answer": "The Mattermost mobile app follows a monthly release process with specific milestones:    1. Feature Complete (T-24): This is the deadline for feature completion, and the release branch is cut from the main branch.    2. RC-1 cut (T-19): Release Candidate builds are created from the release branch, and QA release testing begins.    3. Code Freeze (T-10): Release testing is completed, and QA approval should be ready.    4. Release Day (T-0): The new version is submitted to the iOS App Store and Google Play Store on the 16th of each month.    It's important to note that T-minus counts are measured in working days, excluding weekends and statutory holidays. The mobile app release schedule is aligned with the cloud/self-hosted release schedule for coordinated testing cycles. Additionally, iOS App Store approval may take a few days after the submission date.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/mobile-release"
  },
  {
    "question": "What is the process for handling security releases in Mattermost?",
    "answer": "The security release process in Mattermost involves several steps for addressing high, medium, and low severity security issues. The process begins with submitting a pull request for the issue, which is then reviewed by developers and QA before being merged. Next, the bug fix is cherry-picked to the relevant release branch. A release candidate (e.g., 7.2.1-RC1) is then created for quick final smoke tests. After QA approval, a final release build (e.g., 7.2.1) is cut and made ready for customer distribution. The specific security issues that warrant a dot release are determined based on the backport policy. For the most up-to-date checklist, the Dot Release Playbook should be consulted.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/security-release"
  },
  {
    "question": "What is the typical timeline for a Playbooks release and what are the key steps involved?",
    "answer": "The Playbooks release process follows a monthly cycle with several key steps:    1. Features and bug fixes are merged throughout the development period.    2. Three days before release (T-3): A Release Candidate is cut.    3. Two days before release (T-2): Smoke testing is conducted.    4. Release Day (T-0): The new version is officially released.    On the first Monday of each month (or the next business day), the Playbooks team's Product Manager and Dev Lead select the version of the plugin to be pre-packaged into that month's self-managed release. This version must be merged by the Code Freeze day and undergoes additional testing.    The release process includes several tasks such as:    - Tracking and triaging bugs via Jira    - Adding PR milestones for QA tracking    - Generating release notes    - Updating NOTICE.txt and dependencies    - Conducting testing and automated tests    - Preparing marketing materials and documentation    - Creating a GitHub release    - Checking the minimum required server version    - Organizing contributor recognition and swag    - Communicating release dates    - Conducting a release retrospective    Critical bugs are addressed before releasing, with quick dot releases as needed. The team uses specific playbooks and checklists to manage the release process and pre-packaging with self-managed versions.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/playbooks-release"
  },
  {
    "question": "What are the key components of the Boards Release Process for the Mattermost core team?",
    "answer": "The Boards Release Process for the Mattermost core team consists of several key components:\n\n1. Release Timeline: The schedule is outlined in a Google Sheets document, with the latest Focalboard Personal Edition release from the prior month typically included in the next self-managed release pre-packaged version.\n\n2. Bug Management: Critical bugs are flagged and fixed before releasing, with quick dot releases as needed. Bugs are tracked and triaged via GitHub.\n\n3. Documentation: There are specific documents for filing bugs, publishing releases, and managing the publicity process.\n\n4. Feature Management: Feature flags are used to test new features.\n\n5. Quality Assurance: The goal is to automate as many tests as possible and integrate with the QA dashboard. PR milestones are added for QA tracking.\n\n6. Release Tasks: These include updating the changelog, NOTICE.txt, and dependencies; monitoring translations; listing software requirements; conducting testing; managing marketing efforts; updating feature documentation; and handling the actual release on various platforms.\n\n7. Post-Release Activities: These include managing contributor swag, conducting retrospectives, and potentially tracking quality metrics.\n\n8. Tools: A playbook is used to run releases, and Boards are used for tracking work items.\n\nThe process draws from Agile, Scrum, and Software Development Lifecycle methodologies to ensure a comprehensive and efficient release cycle.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/boards-release"
  },
  {
    "question": "How is the 'Total valid bug fixes in fix version' metric measured in the Release Scorecard?",
    "answer": "The 'Total valid bug fixes in fix version' metric is measured after closing the current release using a specific Jira query. The query is as follows: project = Mattermost AND issuetype = Bug AND resolution not in (Duplicate, 'Cannot Reproduce', 'Won't Fix') AND fixVersion = latestReleasedVersion(). This query filters for Mattermost project bugs that have been resolved (excluding duplicates, cannot reproduce, and won't fix resolutions) and are included in the latest released version.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/release-scorecard-definitions"
  },
  {
    "question": "What is the purpose of the 'Release Process' section in the handbook?",
    "answer": "The 'Release Process' section in the handbook is designed to provide information about the organization's release planning strategy and processes. It serves as a resource for team members to understand how software releases are planned, executed, and managed. This section likely includes details on release cycles, versioning, quality assurance procedures, and deployment strategies. By documenting these processes, the organization aims to ensure consistency, improve efficiency, and maintain transparency in their software development and release workflows.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/"
  },
  {
    "question": "What is the release schedule for the Mattermost desktop app and how is the release timeline structured?",
    "answer": "The Mattermost desktop app follows a fixed schedule of 4 releases per year, shipping quarterly by the 16th of February, May, August, and November. The release timeline is structured using a T-minus system, counting down in working days before the release day. Key milestones include:\n\n1. T-24: Release branch cut and Feature Complete deadline\n2. T-19: RC-1 (Release Candidate 1) is cut\n3. T-10: Code Freeze\n4. T-8: QA approval should be ready\n5. T-0: Release Day\n\nThis schedule aligns with the cloud/self-hosted release milestones to synchronize all release testing cycles. Additionally, a dot release may be prepared earlier if Electron releases a security update or if urgent bugs are discovered.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/desktop-release"
  },
  {
    "question": "What are the key responsibilities of the Release Manager on Release Day (T-minus 0 working days)?",
    "answer": "On Release Day, the Release Manager has several important responsibilities:\n\n1. Post the release checklist in the Release Checklist channel and verify all items from the previous checklist are complete.\n\n2. Update the server upgrade in-product notice.\n\n3. Schedule a release retrospective meeting within five days of the release.\n\n4. Update the Integrations Directory on the Mattermost Apps and Integrations page.\n\n5. Prepare and post release metrics.\n\n6. Update the company roadmap.\n\n7. Announce the MVP winner in the Contributors channel and update the MVP page.\n\n8. Add new release fix versions in Jira for upcoming releases.\n\n9. Post key dates for the next release in the Release Discussion channel.\n\n10. Close the release in Jira for both webapp and mobile.\n\n11. Create team meetings for the next release, including Bug Bash and Release Triage meetings.\n\n12. Prepare tickets for the next release and assign them to appropriate sprints.\n\n13. Confirm that mattermost-docker has been updated to the latest version.\n\n14. Contact owners of community installers to update install version numbers.\n\n15. Turn on CrazyEgg for the blog post page.\n\n16. Confirm marketing materials have been posted (GIFs, screenshots, announcements, tweets, blog posts).\n\n17. Update the @mattermosthq Twitter profile with the next release date.\n\n18. Prepare to retweet the GitLab release tweet.\n\nThese tasks ensure a smooth release process and set up preparations for the next release cycle.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/bug-fix-release"
  },
  {
    "question": "What is the process for handling dot releases in Mattermost, and how are they prioritized?",
    "answer": "Dot releases in Mattermost are specifically done for high priority and high severity security issues and customer bugs. The process involves several steps:    1. Issue escalation from customers, support team, community members, or internal sources.    2. Immediate investigation by the developer team.    3. Submission, review, and merging of a pull request for the issue.    4. Cherry-picking the bug fix to the relevant release branch.    5. Creating a release candidate (e.g., 7.2.1-RC1) for final smoke tests.    6. After QA approval, cutting a final release build (e.g., 7.2.1) ready for customer distribution.    Urgent dot releases are always prioritized, although the time-to-fix may vary. The process ensures that critical issues are addressed promptly and efficiently. For the most up-to-date checklist, the Dot Release Playbook is available as a reference.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/dot-release"
  },
  {
    "question": "What is the purpose of the 'How to Guides for Product' section in the Mattermost handbook?",
    "answer": "The 'How to Guides for Product' section in the Mattermost handbook is likely designed to provide step-by-step instructions and best practices for various product-related tasks and processes. These guides are typically created to assist team members in understanding and executing product development, management, and improvement activities within the Mattermost organization. While the specific content of the guides is not provided in the given information, such sections in company handbooks often cover topics like product planning, feature development, user research, product testing, and launch procedures.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/how-to-guides-for-product/"
  },
  {
    "question": "What are the three types of build numbers in Mattermost's release numbering system, and what is the purpose of each?",
    "answer": "Mattermost uses three types of build numbers in its release numbering system:\n\n1. Major build number:\n   - Purpose: Introduces significantly new functionality or changes existing product behavior\n   - Release frequency: Once a year\n   - Example: v1.x.x, v2.x.x\n\n2. Minor build number:\n   - Purpose: Introduces new features, bug fixes, and performance improvements\n   - Release frequency: Monthly cadence\n   - Example: v1.2.x, v1.4.x\n\n3. Patch build number:\n   - Purpose: Patches existing releases when severe bug fixes or security patches are required\n   - Release frequency: As required\n   - Example: v1.2.5, v1.2.6\n\nThis numbering system allows Mattermost to clearly communicate the scope and importance of each release to users and stakeholders, while maintaining a consistent and predictable release schedule.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/release-overview"
  },
  {
    "question": "What are the key milestones in the Mattermost Cloud and Self-Hosted Release Process?",
    "answer": "The Mattermost Cloud and Self-Hosted Release Process follows a monthly cycle with several key milestones:    1. Feature Complete and Release Branch Cut (T-24): All major features must be completed and merged about five weeks before the self-managed release date. The 'release-X.Y' branch is cut from master.    2. Judgment Day (T-19): The release manager reviews the status of all features and issues. RC-1 is cut on this day.    3. Release Qualification Starts (T-18): The release team begins comprehensive testing and verification.    4. Code Freeze (T-10): All further changes to the release branch are prohibited.    5. Release Approval (T-8): The delivery team formally signs off on the release qualification.    6. Cloud Beta Release (T-7): The release is rolled out to cloud beta production servers.    7. Cloud Freemium Release (T-6): The release is rolled out to the freemium ring.    8. Cloud Professional Release (T-5): The release is rolled out to customers in the professional ring.    9. Cloud Enterprise Release (T-3): The release is rolled out to customers in the enterprise ring.    10. Cloud Dedicated Release (T-2): The release is rolled out to enterprise customers with dedicated clusters.    11. Self-Managed Release (T-0): The same build is released for self-hosted customers, typically on the first business day on or before the 16th of the month.    This process ensures that the same version is thoroughly tested and gradually rolled out across different environments before reaching self-hosted customers.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/release-process/feature-release"
  },
  {
    "question": "What is the purpose and format of the Roadmap Video, and how is it produced and shared?",
    "answer": "The Roadmap Video is a 5-7 minute recording aimed at publicly sharing roadmap updates for the upcoming month's release and large future features with the Mattermost community. Its purpose is to provide information and gather feedback from users. The video format includes:    1. Big features releasing in the current month    2. Demos of features or designs, explaining their value proposition    3. Updates on highly requested features and their timelines (3+ months out)    4. Designs and timelines for target releases, if available    The production process involves:    1. Recording the video using any software    2. Submitting the video to Marketing for final production via an Asana task    3. Marketing adds intro/outro and ensures minimum resolution requirements    4. The produced video is uploaded to Wisteria and a public link is provided    Sharing the video involves:    1. Posting it in the Contributor Team Roadmap channel on the first Monday of the month    2. Holding an internal PM:Sales Meeting to discuss the updates    3. Cross-posting in the Reception channel to encourage viewership    The entire process is coordinated using a playbook, initiated 14 days before the end of the month, and concludes with a retrospective in the next PM weekly meeting.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/how-to-guides-for-product/how-to-record-a-roadmap-video"
  },
  {
    "question": "What are the main focus areas and priorities for the Analytics team at Mattermost as of Q2FY21?",
    "answer": "The Analytics team at Mattermost, which includes Business Operations, Data Engineering, and Analytics functions, is relatively new, having started in December. Their main focus areas currently include data collection, mapping data to business logic, data modeling, implementing Looker as a data visualization tool to replace Chartio, and automating metrics. For Q2FY21, their priorities are visualized in a chart, which likely outlines specific goals and initiatives. Additionally, they are working on automating Mattermost Business Metrics, with a rollout plan in place. This plan includes information on current status, owners, and targets for the automation process. The team's work is described as ever-evolving and currently a work in progress (WIP) due to its recent establishment.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/analytics/"
  },
  {
    "question": "What is the purpose of telemetry data collection in Mattermost, and how is it implemented?",
    "answer": "Telemetry data collection in Mattermost serves multiple important purposes. It is used to identify security and reliability issues, analyze and fix software problems, improve the quality of Mattermost software and related services, and inform design decisions for future releases. Telemetry is considered essential for tracking product usage, quickly identifying problems, and operating the business effectively. Mattermost aims to have working telemetry, in the form of Looker reports, for every feature before it is released. To implement telemetry, Mattermost uses RudderStack to collect data, which is then pushed to Snowflake for storage and analysis. The company has created a Telemetry Handbook to ensure the collection of useful telemetry from all sources, providing guidelines for both Product Managers and engineers on how to implement telemetry effectively.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/analytics/telemetry"
  },
  {
    "question": "How does Productboard organize and process customer feedback for product development?",
    "answer": "Productboard organizes and processes customer feedback through several key components:    1. Insights (or Notes): These are used to capture feedback, identify customer problems, wants/needs, feature shortcomings, and areas for improvement. Insights can be created directly in Productboard or added via integrations with tools like Salesforce, Zendesk, or through a Chrome extension.    2. Features: Customer feedback and insights are linked to existing features or used to create new feature ideas. This helps in validating and measuring demand for specific functionalities.    3. Insights Processing: Product Managers process new feedback weekly, attaching relevant information to existing or new features. New features are entered as 'ideas'.    4. Feature Statuses: Features progress through various statuses (Idea, Under Consideration, Planned, In Development, Postponed, Won't Do) based on validation and development decisions.    5. Roadmaps: These help in visualizing and planning feature development over time.    6. Portals: These are likely used for sharing roadmaps or collecting feedback from customers.    This organized approach allows Productboard to effectively collect feedback, validate features, gather requirements, and prioritize the product roadmap. It serves as a central tool for deciding what to build and when, complementing other systems like Confluence or Jira which are used for detailed feature design and communication.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/how-to-guides-for-product/how-to-use-productboard"
  },
  {
    "question": "What are the key steps and guidelines for updating the Mattermost Integrations Directory?",
    "answer": "Updating the Mattermost Integrations Directory involves several key steps and guidelines:    1. Initial steps:       - Log in to the WordPress admin panel       - Navigate to 'Posts' and select 'Add New' for a new integration    2. Integration elements to include:       - Title (including 'Plugin' if applicable)       - Description (short, without ending period)       - Author (GitHub author's full name, company name, or username)       - Language (programming language, over 30% usage)       - License (must be compatible with Apache 2.0)       - Download URL (link to README file)       - Source code URL (GitHub repo link)       - Date Published (oldest release or start date)       - Categories (based on best fit)       - Featured image (logo or appropriate icon)       - Date last updated (last commit date)    3. Guidelines:       - License must be Apache 2.0 compatible       - Integration must have been updated in the last 12 months       - Must be clearly related to Mattermost    4. Marketing and Announcement:       - Add creators to changelog's contributor list       - Tweet about new integrations       - Announce in the Integrations channel and Announcements channel    5. Release date tasks:       - Update 'New and Noteworthy' category       - Update 'Date Last Updated' for all integrations       - Remove outdated integrations       - Consult with Integrations PM for 'Staff Picks' section    These steps ensure that the Integrations Directory remains current, relevant, and adheres to Mattermost's standards.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/how-to-guides-for-product/integrations-directory"
  },
  {
    "question": "What are the key components and timeline for writing a feature release announcement at Mattermost?",
    "answer": "A feature release announcement at Mattermost consists of several key components and follows a specific timeline:    1. Components:       - Feature Headline: Starts with a verb, describes what the feature allows customers to do, and mentions the edition it's provided in.       - Feature Benefit: A quick summary sentence describing the benefit the feature provides.       - Feature Details: More detailed description of how the feature works and its functionality.       - Feature Image: Screenshots or GIFs of the feature.       - Feature Resources: Links to documentation, forum posts, or repositories for more information.    2. Timeline:       - T-14 working days: Release Manager provides an outline and deadlines.       - T-9 working days: First draft of the release announcement and tweets completed by Product Managers.       - T-8 working days: Lead Product Managers review the announcement.       - T-7 working days: Director of Product Marketing and Director of Communications review the draft.       - T-2 working days: Final copy provided to the marketing team.       - T-0 (Release Day): The release announcement is published.    Additionally, Product Managers are responsible for drafting corresponding release tweets, which should start with 'Mattermost Release vx.xx now...' and include relevant hashtags.    This process ensures a coordinated, informative, and exciting communication of new features to current and prospective customers.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/how-to-guides-for-product/release-announcement"
  },
  {
    "question": "What is the current process for exporting data from Mattermost Cloud?",
    "answer": "The process for exporting data from Mattermost Cloud has been updated and moved to a new location. The latest procedures for migrating Cloud data, including both data imports and exports, can now be found on the official Mattermost documentation website. Users are directed to visit https://docs.mattermost.com/manage/cloud-data-export.html#migrate-from-cloud-to-self-hosted for the most up-to-date information on Cloud data export processes and migration from Cloud to self-hosted environments.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/cloud-data-export-process"
  },
  {
    "question": "What are some key dashboards available for the Sales team at Mattermost?",
    "answer": "The Sales team at Mattermost has access to several important dashboards:1. Clearbit: Self-hosted instance enrichment - This dashboard provides a list of self-hosted instances enriched by Clearbit data.2. Cloud Freemium 360 - This dashboard offers detailed information about specific Cloud leads when the server ID is known.3. Cloud PQL Salesforce Dashboard - This dashboard shows Cloud leads and PQL (Product Qualified Lead) breakdown, including the number of Cloud PQLs generated per week.4. Self-hosted PQL Salesforce Dashboard - Similar to the Cloud PQL dashboard, this one focuses on self-hosted PQL breakdown and the number of Self-hosted PQLs generated per week.These dashboards provide valuable insights for the Sales team to track leads, understand customer behavior, and monitor product adoption across different deployment types (cloud and self-hosted).",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/analytics/looker/dashboards"
  },
  {
    "question": "What is Looker and how is it used in business analytics?",
    "answer": "Looker is a business intelligence software and big data analytics platform designed to help organizations explore, analyze, and share real-time business analytics with ease. It provides a comprehensive solution for companies to gain insights from their data and make data-driven decisions. Looker's capabilities allow users to dive deep into their data, create visualizations, and distribute findings across their organization. The platform's real-time functionality ensures that businesses can access up-to-date information, enabling them to respond quickly to changing market conditions or internal metrics. Looker's ease of use makes it accessible to both technical and non-technical users, democratizing data analysis within an organization.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/analytics/looker/"
  },
  {
    "question": "What are Explores in Looker and what are some commonly used Explores for different departments at Mattermost?",
    "answer": "Explores in Looker are the starting points for building reports. They are not accessible to everyone, as not all users have 'Explorer' privileges. Mattermost uses various Explores for different departments:\n\n1. Customer Success:\n   - Account Overview for CS\n   - Zendesk Tickets\n\n2. Finance:\n   - ARR Granular Reporting\n   - Daily Account ARR Changes\n   - Monthly Account ARR Changes\n\n3. General:\n   - Downloads\n   - NPS Data\n   - NPS User Monthly Score\n\n4. Google Analytics:\n   - Daily Page Visits\n   - Daily Traffic\n\n5. Salesforce:\n   - Account to Line Item\n   - Campaign\n   - Lead to Account\n\n6. Servers:\n   - Server Daily Details\n   - Server Daily Details Ext\n   - Server Fact\n\n7. User Events:\n   - Event Registry\n   - User Events by Date\n   - User Events by Date Agg\n\nEach of these Explores is tailored to provide specific insights for different aspects of Mattermost's operations and can be accessed via unique URLs in the Looker platform.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/analytics/looker/explores"
  },
  {
    "question": "What is the main focus of the Engineering section in the handbook?",
    "answer": "Based on the provided content, there is insufficient information to provide a detailed answer about the main focus of the Engineering section. The content only includes the title 'Engineering' without any additional details or explanations. To accurately answer this question, more specific information about the Engineering section's content, goals, or structure would be needed.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/"
  },
  {
    "question": "What are the three major components that enable Self Service in Mattermost, and what are their primary functions?",
    "answer": "The three major components that enable Self Service in Mattermost are:    1. Customer Portal: This provides a portal for customers to self-serve product purchases through Mattermost, reducing time to purchase and manual fulfillment time. It's the front-end interface that customers interact with directly.    2. blapi (Business Logic API): This component is responsible for several crucial functions:       - Surfacing billings, licensing, and customer data to the Customer Portal       - Generating required records in Salesforce (SFDC) to enable reporting and sales processes       - Converting SFDC records to information required to run Customer Portal       - Charging credit cards in Stripe    3. License Generator: This is a microservice responsible for generating the license that is used in the Mattermost application. It's crucial for creating and managing the licenses that customers purchase through the self-service system.    These components work together to create a seamless self-service experience, from purchase to license generation, while also integrating with necessary backend systems like Salesforce and Stripe.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/self-service"
  },
  {
    "question": "What are the main steps involved in the plugin release process for Mattermost?",
    "answer": "The main steps involved in the Mattermost plugin release process are:\n\n1. Create a release issue to track the entire process.\n2. Create a version bump PR to update the plugin version.\n3. Tag and cut a version of the plugin for release using the '/mb cutplugin' slash command.\n4. Bundle the plugin release version to a Mattermost server release if applicable.\n5. Publish the plugin release version to the Plugin Marketplace.\n6. Release to community.mattermost.com.\n\nEach of these steps involves several sub-tasks. For example, creating a version bump PR requires checking for security issues, using the 'pluginops' tool, and getting approvals from developers and QA. The process also includes considerations for security upgrades and updating dependencies when necessary.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/plugin-release-process"
  },
  {
    "question": "How do the responsibilities and expectations of a Product Analyst change as they progress from Level 1 to Level 7?",
    "answer": "The responsibilities and expectations of a Product Analyst evolve significantly as they progress from Level 1 to Level 7:    Level 1 (Product Analyst I): At this entry level, analysts execute defined tasks across the data analytics stack. They receive detailed instruction on most tasks and work cooperatively with peers. They consider the customer's perspective but mainly focus on learning and asking clarifying questions.    Level 2 (Product Analyst I): Analysts begin to influence and execute defined tasks and features. They receive general instruction on day-to-day work but still need detailed guidance on new assignments. They start applying basic best practices for customer impact.    Level 3-4 (Product Analyst II): At this level, analysts design, lead, and deliver high-impact features across the data infrastructure stack. They begin working directly with PM, Engineering, and GTM teams, aligning data modeling and analysis with broader requirements. They can navigate moderately complex decisions about customer value independently.    Level 5-6 (Senior Product Analyst): These analysts set and deliver architectural vision for high-impact features. They organize cross-functional initiatives and are recognized as technical authorities. They can make independent decisions on complex topics affecting customer value and lead cross-product, cross-feature, and cross-team discussions.    Level 7 (Staff Product Analyst): At this advanced level, analysts consult on architectural visions across teams. They define tasks for members of other teams and mentor new team members. They're frequently sought out by product and engineering leads for opinions on data implementation decisions. They have ownership of cross-product customer impact topics and can anticipate complex issues early in planning and development processes.    Throughout these levels, there's a clear progression in terms of scope, independence, influence, customer impact, and leadership. Analysts move from executing defined tasks with close supervision to setting architectural visions and mentoring others, while their impact expands from team-level to cross-functional and company-wide initiatives.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/product/analytics/analyst-levels"
  },
  {
    "question": "What are the requirements and process for granting expanded access to private repositories or systems for core contributors in the Mattermost community?",
    "answer": "Expanded access for core contributors to private repositories or systems can be granted on a case-by-case basis when certain conditions are met. The requirements include:    1. The contributor must be a trusted, long-standing member of the community.    2. Access is not granted to production systems.    3. Approval is obtained from both the system's division head and Security Operations.    4. The contributor must sign Mattermost's Non-Disclosure Agreement (NDA).    The process for obtaining approval involves:    1. Sending an email request to the division head using a provided template, which includes the contributor's name, required access, and justification. The email should cc security-ops@mattermost.com.    2. Waiting for approval from both the division head and Security Operations.    3. Asking the community member to sign the standard Mattermost NDA.    4. Once the NDA is signed, the division head can assist in granting the necessary access.    This policy ensures that expanded access is given responsibly while maintaining security and confidentiality standards.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/core-contributor-expanded-access"
  },
  {
    "question": "What is Mattermost's policy for engineering staff attending conferences, and what is the approval process?",
    "answer": "Mattermost has a policy that allows each engineering staff member to request approval for one company-paid conference per year. The policy includes several key points:\n\n1. Conferences should be regional to the staff member, typically not requiring ocean crossings or flights over 6 hours.\n2. The conference content should be relevant to the staff member's role.\n3. Costs should align with company policies.\n4. Only a limited number of staff can attend the same conference simultaneously.\n5. Attendees are expected to share their learnings with the team.\n\nThe approval process involves three main steps:\n\n1. The staff member sends an email request to their Manager and Director using a specific template that includes conference details and estimated costs.\n2. The Manager, Director, and Team MLT review the request and prepare a business case aligning the learning opportunity with Mattermost's goals.\n3. HR and Finance review the business case and communicate the final approval decision.\n\nIf approved, the staff member can proceed with booking tickets and accommodations, expensing them through Airbase. Managers are required to add the approved conference to a tracking spreadsheet.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/how-to-go-to-conference"
  },
  {
    "question": "What are the primary KPIs used by the Cloud SRE team to monitor cloud infrastructure costs, and what are their goals?",
    "answer": "The Cloud SRE team uses several primary Key Performance Indicators (KPIs) to monitor cloud infrastructure costs:    1. Average Production Workspace Cost (APWC): This measures the ratio of Production Environment costs to the number of active workspaces.    2. Average Production Freemium Cost (APFC): This approximates the cost of free workspaces by comparing Production Environment costs to the number of active free workspaces.    3. Average Subscription Workspace Cost (ASWC): This measures the ratio of Production Environment costs to the number of paid workspaces (those with 11 or more users).    4. Development Metric (DM): This compares the costs of test and development environments to total AWS Cloud costs.    5. Customers Platform Balance Metric (CPBM): This measures the ratio of customer-specific costs to variable platform costs.    The goals for the SRE team, as of July 2021, are:    1. Decrease the Average Cost Per Workspace (APWC).    2. Keep development and test environments costs (DM) below 20% of total costs.    3. Increase the WB fraction (ratio of paid workspaces relative to total workspaces).    These KPIs and goals are used to help the business and the Cloud SRE team set targets for cost optimization and monitor the efficiency of their cloud infrastructure spending.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/cloud-infrastructure-cost-kpis"
  },
  {
    "question": "What is the purpose of Airflow in Mattermost's data engineering infrastructure and how does it integrate with other components?",
    "answer": "Apache Airflow is a crucial component in Mattermost's data engineering infrastructure, serving as a workflow orchestration tool. Its primary purposes are:    1. Building and scheduling DAGs (Directed Acyclic Graphs) for job management.    2. Declaring dependencies between jobs to prevent data overwriting.    3. Providing utilities for retrying failed jobs and alerting for failures.    4. Integrating with other components of the infrastructure:       - It uses Mattermost incoming webhooks to send DAG failures to a special internal channel for triaging.       - It automatically pulls from the master branch of Mattermost's GitHub repository every 60 seconds to keep DAGs up to date.       - It utilizes the KubernetesPodOperator to run each job in its own Kubernetes Pod, allowing for language flexibility and resource customization.       - It injects Kubernetes Secrets as environment variables into the Pods for secure configuration management.    Airflow's integration with these components allows for a robust, scalable, and secure data engineering workflow within Mattermost's infrastructure.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/data-engineering"
  },
  {
    "question": "What is the process for QA testing in the Integrations Team?",
    "answer": "The Integrations Team has a specific process for QA testing:1. QA testing is required for all changes to non-Beta plugins in the Marketplace.2. For Beta plugins, QA testing may be shipped but is not mandatory.3. Changes that don't affect the production code of a plugin (e.g., tooling changes) do not require QA testing.The team follows a Peer Testing Process:1. Dylan mentions reviewers and requests peer testing with a link to the process.2. Developers perform functional testing on the PR using session-based testing and take lightweight session notes.3. After testing, developers mention Dylan in a comment and attach their session notes.4. Dylan reviews the session notes.5. Dylan updates release testing based on functional changes or previously untested cases as needed.6. Dylan approves the PR for merge.7. Any functional changes are included in the next end-to-end test on the version bump PR.Developers are advised to be mindful of certain aspects during testing, such as:- Ensuring proper theme application for visual changes.- Testing in both desktop and browser environments for front-end changes.- Being aware that icons generated with system fonts can differ between Mac and Windows.The process also includes a template for testing notes, which covers the scope of changes, testing notes, and any follow-up concerns.",
    "source": "https://handbook.mattermost.com/operations/research-and-development/engineering/integrations"
  }
]